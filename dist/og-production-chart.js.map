{"version":3,"sources":["og-production-chart.es6.js"],"names":["Polymer","is","listeners","properties","labels","type","Array","value","unit","String","width","Number","height","legendLabels","data","observer","datePicker","dateRange","Object","chartTypes","axisConfigs","selected","filteredData","attached","rangeParse","d3","timeParse","_notifyAttached","fire","_isMultipleData","length","_isSingleData","_setMetaData","_new","_old","forEach","arr","idx","chartType","_filterDates","oldDateRange","Px","from","to","filtered","_tmp","filter","_obj","date","getTime","push"],"mappings":"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","file":"og-production-chart.js","sourcesContent":["(function() {\n  Polymer({\n\n    is: 'og-production-chart',\n\n    listeners: {\n\n    },\n\n    properties: {\n      /**\n      * This property is a list of tab labels\n      *\n      * @property labels\n      */\n      labels: {\n        type: Array,\n        value() {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t\"All\", \"Train 1\", \"Train 2\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t/**\n      * Unit for Y-Axis values\n      *\n      * @property unit\n      */\n      unit: {\n        type: String,\n        value: \"Metric ton/day\"\n\t\t\t},\n\t\t\t/**\n      * Chart Width\n      *\n      * @property width\n      */\n      width: {\n        type: Number,\n        value: 960\n\t\t\t},\n\t\t\t/**\n      * Chart Height\n      *\n      * @property height\n      */\n      height: {\n        type: Number,\n        value: 300\n\t\t\t},\n\t\t\t/**\n      * The Actual, Target and design values to be displayed in the legend\n      *\n      * @property legendLabels\n      [\"Actual\", \"Target\", \"Forecast\", \"Design Capacity\"]\n      */\n\t\t\tlegendLabels: {\n\t\t\t\ttype: Array,\n        value() {\n\t\t\t\t\treturn [\"Actual\", \"Target\", \"Forecast\", \"Design\"];\n\t\t\t\t}\n      },\n\t\t\t/**\n\t\t\t* This property is an Array of tab data.\n\t\t\tMember of each tab data looks like this\n\t\t\t`{\"date\":\"2017-05-01T16:00:00.000Z\",\"actual\":\"11960\",\"target\":\"12950\",\"design\":\"13960\"}`\n      *\n      * @property data\n      */\n\t\t\tdata: {\n\t\t\t\ttype: Array,\n\t\t\t\tvalue() {\n\t\t\t\t\treturn [];\n\t\t\t\t},\n        observer: \"_setMetaData\"\n      },\n      /**\n\t\t\t* The Date to show in Datepicker. If provided, dateRange will be ignored\n\t\t\tEg: \"2017-04-03T03:37:25.000Z\"\n      *\n      * @property datePicker\n      */\n      datePicker: {\n        type: String\n      },\n\t\t\t/**\n\t\t\t* The Date range to filter the data. Format as specified in the px-rangepicker\n\t\t\tEg:\n\t\t\t`{\"from\":\"2017-04-03T03:37:25.000Z\",\"to\":\"2017-10-26T03:37:25.000Z\"}`\n      *\n      * @property dateRange\n      */\n      dateRange: {\n        type: Object,\n        value() {\n          return {};\n        },\n        observer: \"_filterDates\"\n      },\n      /**\n       * Array of chart Types.\n       * Eg: [\"line\", \"area\", \"line\"]\n       * @property chartTypes\n       */\n      chartTypes: {\n\t\t\t\ttype: Array,\n\t\t\t\tvalue: () => {\n          return [];\n        }\n      },\n      /**\n       * Array of Axis Configurations\n       * Eg: [{\n\t\t\t\t\t\t\"x\": {\n\t\t\t\t\t\t\t\"tickFormat\": \"\",\n\t\t\t\t\t\t\t\"inputTimeFormat\": \"%Y-%m-%dT%H:%M:%S.%LZ\",\n\t\t\t\t\t\t\t\"tickTimeFormat\": \"%d %b %y\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"y\": {\n\t\t\t\t\t\t\t\"tickFormat\": \".3s\",\n\t\t\t\t\t\t\t\"hideGrid\": true,\n\t\t\t\t\t\t\t\"dotRadius\": 0,\n\t\t\t\t\t\t\t\"start\": 600\n\t\t\t\t\t\t}\n\t\t\t\t\t}, null, null]\n       * @property axisConfigs\n       */\n\t\t\taxisConfigs: {\n\t\t\t\ttype: Array,\n\t\t\t\tvalue: () => {\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t},\n\t\t\tselected: {\n\t\t\t\ttype: Number,\n\t\t\t\tvalue: 0\n\t\t\t},\n      filteredData: {\n        type: Array,\n        value() {\n          return [];\n        }\n      }\n\t\t},\n\n    attached() {\n      this.rangeParse = d3.timeParse(\"%Y-%m-%dT%H:%M:%S.%LZ\");\n      this._notifyAttached();\n    },\n\n    _notifyAttached() {\n      /**\n       * Event fired when the component is attached\n       *\n       * @event attached\n       */\n      this.fire('attached', {});\n    },\n\n    _isMultipleData(data) {\n      return data.length > 1;\n    },\n\n    _isSingleData(data) {\n      return data.length === 1;\n    },\n    _setMetaData(_new, _old) {\n      if(!_new || !_new.length) {\n        return _new;\n      }\n      this.chartTypes = this.chartTypes ? this.chartTypes : [];\n      this.axisConfigs = this.axisConfigs ? this.axisConfigs : [];\n      _new.forEach((arr, idx)=> {\n        arr.chartType = this.chartTypes.length > idx ? this.chartTypes[idx] : \"\";\n        arr.chartType = arr.chartType ? arr.chartType : \"\";\n        arr.axisConfigs = this.axisConfigs.length > idx ? this.axisConfigs[idx] : \"\";\n        arr.axisConfigs = arr.axisConfigs ? arr.axisConfigs : \"\";\n      });\n      this.filteredData = _new;\n    },\n    _filterDates(dateRange, oldDateRange, data) {\n      data = data ? data : this.data;\n      if(!data) {\n        return;\n      }\n      const d3 = Px.d3;\n      this.rangeParse = d3.timeParse(\"%Y-%m-%dT%H:%M:%S.%LZ\");\n      const from = dateRange ? this.rangeParse(dateRange.from) : null;\n      const to = dateRange ? this.rangeParse(dateRange.to) : null;\n      let filtered = [];\n      this.chartTypes = this.chartTypes ? this.chartTypes : [];\n      this.axisConfigs = this.axisConfigs ? this.axisConfigs : [];\n      data.forEach((arr, idx)=> {\n        let _tmp = null;\n        if(dateRange && from && to) {\n          _tmp = arr.filter((_obj) => {\n            if(!_obj.date) {\n              return false;\n            }\n            const date = _obj.date.getTime ? _obj.date : this.rangeParse(_obj.date);\n            return date.getTime() >= from.getTime()\n              && date.getTime() <= to.getTime();\n          });\n        } else {\n          _tmp = arr;\n        }\n        _tmp.chartType = this.chartTypes.length > idx ? this.chartTypes[idx] : \"\";\n        _tmp.chartType = _tmp.chartType ? _tmp.chartType : \"\";\n        _tmp.axisConfigs = this.axisConfigs.length > idx ? this.axisConfigs[idx] : \"\";\n        _tmp.axisConfigs = _tmp.axisConfigs ? _tmp.axisConfigs : \"\";\n        filtered.push(_tmp);\n      });\n      this.filteredData = filtered;\n    }\n  });\n})();\n"]}